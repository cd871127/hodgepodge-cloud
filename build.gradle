import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    repositories {
        maven {
            url aliyunMevenRepo
        }
        maven {
            url springRepo
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.bmuschko:gradle-docker-plugin:4.2.0"
    }
}

//需要redis服务名
String[] redisProjects = ['service-safe-box', 'service-auth', 'service-cipher']
String[] consulProjects = ['service-safe-box', 'service-auth',
                           'service-cipher', 'service-test',
                           'service-gateway']
String[] feignProjects = ['service-cipher', 'service-auth']
//需要mysql服务名
String[] mysqlProjects = ['service-safe-box', 'service-auth', 'service-cipher']
String[] webProjects = ['service-cipher', 'service-auth']
String[] testProjects = ['service-test']

//所有子项目配置
allprojects {
    group 'io.github.cd871127'
    version '0.0.1'
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8

    repositories {
        maven {
            url aliyunMevenRepo
        }
        maven {
            url springRepo
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    dependencies {
        implementation group: 'com.alibaba', name: 'fastjson', version: fastjsonVersion
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        testCompile group: 'junit', name: 'junit', version: junitVersion
    }
}

//所有服务配置
configure(subprojects.findAll { it.name.startsWith('service-') }) {
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.bmuschko.docker-remote-api"
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

//    configurations {
//        compile.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//    }


    dependencies {
        compile project(":lib-core")
        compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging'

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }

    bootJar {
        rootSpec.exclude("**/config/")
    }

    project.afterEvaluate {
        task createDockerfile(type: Dockerfile, dependsOn: bootJar, group: "docker") {
            destFile = project.file("${project.buildDir}/libs/Dockerfile")

            from "${dockerJdkImage}"
            runCommand("groupadd -r app && useradd -r -g app app")
            runCommand("mkdir -p /app/config && mkdir -p /app/logs")
            runCommand("chown -R app:app /app")
            addFile("${bootJar.archiveName}", "/app/")
            volume("/app/config", "/app/logs")
//        environmentVariable("TZ", "Asia/Shanghai") // 默认时区设置为东8区
            workingDir("/app")
            exposePort(8080)
//        defaultCommand("sh", "-c", "java \$DUIC_OPTS -jar $jarName")
            entryPoint("java", "-jar", "${bootJar.archiveName}")

        }

        task removeAppImage(type: DockerRemoveImage, group: 'Docker') {
            description 'Remove the docker image using force'
            force = true
            targetImageId { "cd871127/${project.name}:${project.version}" }
            onError { exception ->
                if (exception.message.contains('No such image')) {
                    println "Docker image: cd871127/${project.name}:${project.version} not found."
                } else {
                    print exception
                }
            }
        }

        task buildImage(type: DockerBuildImage, dependsOn: createDockerfile, group: "docker") {
            dependsOn removeAppImage
            tags.add("cd871127/${project.name}:${project.version}")
            remove = true
            description 'Executes bootRepackage, generates a docker file and builds image from it'
            inputDir = createDockerfile.destFile.get().asFile.parentFile
        }
    }
}

configure(subprojects.findAll { redisProjects.contains(it.name) }) {
    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
        compile group: 'org.springframework.session', name: 'spring-session-data-redis'
        compile project(":hodgepodge-spring-boot-starter")
    }
}

configure(subprojects.findAll { mysqlProjects.contains(it.name) }) {
    dependencies {
        compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: mybatisVersion
        compile group: 'mysql', name: 'mysql-connector-java', version: mysqlVersion
        compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: pageHelperVersion
    }
}

configure(subprojects.findAll { consulProjects.contains(it.name) }) {
    dependencies {
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul-discovery'
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul-config'
    }
}

configure(subprojects.findAll { testProjects.contains(it.name) }) {
    dependencies {
//        compile project(":hodgepodge-spring-boot-starter")
    }
}

configure(subprojects.findAll { webProjects.contains(it.name) }) {
    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    }
}

configure(subprojects.findAll { feignProjects.contains(it.name) }) {
    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile group: 'io.github.openfeign', name: 'feign-httpclient', version: '10.1.0'
    }
}


